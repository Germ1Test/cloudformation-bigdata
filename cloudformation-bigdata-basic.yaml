AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Germain CAIJO - Exercice 1

Parameters:
  Environment:
    Type: String
    Default: dev
    Description: Environment name (dev/test/prod)
  BucketNamePrefix:
    Type: String
    Default: bigdata-bucket
    Description: Prefix for S3 bucket
  DynamoTableName:
    Type: String
    Default: BigDataTable
    Description: DynamoDB table name
  EC2KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair
  InstanceType:
    Type: String
    Default: t3.micro
    Description: EC2 instance type
  LatestAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2023-ami-kernel-default-x86_64
    Description: Latest Amazon Linux 2023 AMI

Resources:

  # S3 Bucket
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${BucketNamePrefix}-${Environment}-${AWS::Region}"

  # DynamoDB Table
  DynamoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref DynamoTableName
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST

  # IAM Role for EC2
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: [ec2.amazonaws.com]
            Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2Role
      Path: "/"

  # Security Group
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  # EC2 Instance
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: !Ref EC2KeyName
      SecurityGroupIds:
        - !GetAtt InstanceSecurityGroup.GroupId
      IamInstanceProfile: !Ref EC2InstanceProfile
      ImageId: !Ref LatestAmiId
      UserData:
        Fn::Base64: !Join
          - ''
          - - "#!/bin/bash\n"
            - "set -eux\n"
            - "dnf update -y\n"
            - "dnf install -y amazon-cloudwatch-agent jq\n"
            - "echo \"hello from $(hostname) in "
            - !Ref AWS::Region
            - " ("
            - !Ref Environment
            - ")\" > /tmp/hello.txt\n"
            - "aws s3 cp /tmp/hello.txt s3://"
            - !Sub "${BucketNamePrefix}-${Environment}-${AWS::Region}"
            - "/hello.txt\n"
            - "INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)\n"
            - "aws dynamodb put-item --table-name "
            - !Ref DynamoTableName
            - " --item '{\"pk\":{\"S\":\"host#'$INSTANCE_ID'\"},\"sk\":{\"S\":\"hello#'$(date +%s)'\"},\"msg\":{\"S\":\"hello from EC2\"}}'\n"
