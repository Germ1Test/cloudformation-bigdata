name: Deploy CloudFormation

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: eu-west-3

    steps:
      # Checkout du dépôt
      - name: Checkout repository
        uses: actions/checkout@v3

      # Configurer les credentials AWS à partir des secrets GitHub
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Vérifier les credentials AWS
      - name: Test AWS credentials
        run: aws sts get-caller-identity

      # Générer un nom de stack unique
      - name: Generate unique stack name
        id: stackname
        run: |
          echo "STACK_NAME=bigdata-infra-${GITHUB_RUN_ID}" >> $GITHUB_ENV
          echo "Generated stack name: $STACK_NAME"

      # Déployer le stack CloudFormation
      - name: Deploy CloudFormation stack
        run: |
          set -x  # Affiche chaque commande
          TEMPLATE_FILE=cloudformation-bigdata-basic.yaml
          EC2_KEY_NAME=MaCleEC2

          # Déploiement CloudFormation
          aws cloudformation deploy \
            --stack-name $STACK_NAME \
            --template-file $TEMPLATE_FILE \
            --capabilities CAPABILITY_NAMED_IAM \
            --parameter-overrides EC2KeyName=$EC2_KEY_NAME \
            --debug
            
      # Afficher les événements CloudFormation en cas d'échec
      - name: Show CloudFormation events on failure
        if: failure()
        run: |
          echo "Fetching CloudFormation stack events for $STACK_NAME..."
          aws cloudformation describe-stack-events --stack-name $STACK_NAME \
            --query 'StackEvents[*].[Timestamp,ResourceType,LogicalResourceId,ResourceStatus,ResourceStatusReason]' \
            --output table
